
------------------------
Looking for source files
------------------------

Found: hungrymain.c lwp.c lwpclean.c lwp.h lwpTestSched.c numbersmain.c snakemain.c snakes.h

-----------------------
Looking for a Makefile
----------------------

Found: Makefile

--------------------------------
Checking for long lines (no program should have any lines > 80 chars)
--------------------------------

Line length ok.


------------------------------------
Building the application: "make liblwp.so"
------------------------------------

make liblwp.so
gcc -Wall -g -I . -g -fPIC -m64 -c lwp.c lwp.h
gcc -Wall -g -I . -g -fPIC -m64 -c -o magic64.o magic64.S
gcc -Wall -g -I . -g -fPIC -shared -o liblwp.so lwp.o magic64.o

---------------
checking for liblwp.so
---------------


--------------------------------------------------------
Test Results:
   These are the results of trying your liblwp.so
against several programs with different characteristics 
described by the filename.  The output of your program
is compared to a reference output using diff(1).  If they
differ, the test case is a failure.


Testing (failure details below):
        -----
         1) Linking (only) against required routines      ... ok.
         2) start() with no threads                       ... FAILURE.
         3) One lwp, calling exit()                       ... ok.
         4) One lwp, calling lwp_yield(), then exit()     ... ok.
         5) One lwp, calling lwp_yield(), then lwp_exit() ... ok.
         6) Five lwps, calling lwp_yield(), then exit()   ... ok.
         7) Five lwps, calling lwp_yield(), then lwp_exit ... ok.
         8) Five threads, variable iters, exit from front ... ok.
         9) Five threads, variable iters, exit from back  ... ok.
        10) Five threads, AlwaysZero scheduling           ... FAILURE.
        11) One lwp, yields, and returns                  ... ok.
        12) Ten lwps, yields, and returns                 ... ok.
        13) Three lwps. Stop, then restart                ... ok.
        14) Lwp spawns another then exits 100 times.      ... ok.
        15) Two Lwps. spawn then exits 50 times.          ... ok.
        16) 100 threads with a minimal stack. Just return ... ok.
        17) 1024 threads, random exit.                    ... FAILURE.
        18) Ping pong with semaphores                     ... ok.
        19) Dine with semaphores                          ... ok.
        20) Transfer threads between schedulers (stopped) ... FAILURE.
        21) Transfer threads between schedulers (live)    ... FAILURE.
        22) Sched->next() returns NULL to lwp_yield()     ... ok.
        -----
FAILURE. (17/22 passed)


-----------------------------------------------------------------
Failure Details
-----------------------------------------------------------------
=================================================
TEST 2: start() with no threads

This test calls lwp_start() without having created any threads


----------
Reference:
----------
About to call lwp_start() with no threads...ok.
----------
Submitted:
----------
Child process (8980) exited due to SIGSEGV.

---------------------------------
Differences (< reference > output)
---------------------------------

1c1
< About to call lwp_start() with no threads...ok.
---
> Child process (8980) exited due to SIGSEGV.
---------
=================================================
TEST 10: Five threads, AlwaysZero scheduling

This is the numbersmain program distributed with the assignment,
but with the scheduler changed to always run the head of the queue.
Each thread (1..5) exits after its number of iterations.


----------
Reference:
----------
Launching LWPS
    1
         2
         2
              3
              3
              3
                   4
                   4
                   4
                   4
                        5
                        5
                        5
                        5
                        5
Back from LWPS.
----------
Submitted:
----------
Child process (9121) exited due to SIGSEGV.

---------------------------------
Differences (< reference > output)
---------------------------------

1,17c1
< Launching LWPS
<     1
<          2
<          2
<               3
<               3
<               3
<                    4
<                    4
<                    4
<                    4
<                         5
<                         5
<                         5
<                         5
<                         5
< Back from LWPS.
---
> Child process (9121) exited due to SIGSEGV.
---------
=================================================
TEST 17: 1024 threads, random exit.

Creat 1024 threads, each of which either yields or exits randomly until
a counter reaches a given value.




----------
Reference:
----------
Spawining 4096 threads.
Done.  Count is 50000. (Yielded 406869 times)
----------
Submitted:
----------
Timed out.
Child process (9245) exited due to SIGTERM.

---------------------------------
Differences (< reference > output)
---------------------------------

1,2c1,2
< Spawining 4096 threads.
< Done.  Count is 50000. (Yielded 406869 times)
---
> Timed out.
> Child process (9245) exited due to SIGTERM.
---------
=================================================
TEST 20: Transfer threads between schedulers (stopped)

Create a number of threads, then set_scheduler() and see if 
they transfer properly.





----------
Reference:
----------
Creating LWPS
Setting the scheduler.
Launching LWPS
    1
         2
              3
                   4
                        5
         2
              3
                   4
                        5
              3
                   4
                        5
                   4
                        5
                        5
Back from LWPS.
----------
Submitted:
----------
Child process (9307) exited due to SIGSEGV.

---------------------------------
Differences (< reference > output)
---------------------------------

1,19c1
< Creating LWPS
< Setting the scheduler.
< Launching LWPS
<     1
<          2
<               3
<                    4
<                         5
<          2
<               3
<                    4
<                         5
<               3
<                    4
<                         5
<                    4
<                         5
<                         5
< Back from LWPS.
---
> Child process (9307) exited due to SIGSEGV.
---------
=================================================
TEST 21: Transfer threads between schedulers (live)

Create a number of threads, start them running,
then set_scheduler() and see if they transfer properly.





----------
Reference:
----------
Creating LWPS
Launching LWPS
    1
         2
              3
                   4
                        5
    1
         2
              3
                   4
                        5
    1
         2
              3
                   4
                        5
Setting the scheduler.
    1
         2
              3
                   4
                        5
    1
         2
              3
                   4
                        5
    1
         2
              3
                   4
                        5
Back from LWPS.
----------
Submitted:
----------
Child process (9329) exited due to SIGSEGV.

---------------------------------
Differences (< reference > output)
---------------------------------

1,34c1
< Creating LWPS
< Launching LWPS
<     1
<          2
<               3
<                    4
<                         5
<     1
<          2
<               3
<                    4
<                         5
<     1
<          2
<               3
<                    4
<                         5
< Setting the scheduler.
<     1
<          2
<               3
<                    4
<                         5
<     1
<          2
<               3
<                    4
<                         5
<     1
<          2
<               3
<                    4
<                         5
< Back from LWPS.
---
> Child process (9329) exited due to SIGSEGV.
---------
